# coding: utf-8

"""
    Phrase Strings API Reference

    The version of the OpenAPI document: 2.0.0
    Contact: support@phrase.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phrase_api.api_client import ApiClient
from phrase_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class GlossaryTermTranslationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def glossary_term_translation_create(self, account_id, glossary_id, term_id, glossary_term_translation_create_parameters, **kwargs):  # noqa: E501
        """Create a translation for a term  # noqa: E501

        Create a new translation for a term in a term base (previously: glossary).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.glossary_term_translation_create(account_id, glossary_id, term_id, glossary_term_translation_create_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account_id: Account ID (required)
        :param str glossary_id: Glossary ID (required)
        :param str term_id: Term ID (required)
        :param GlossaryTermTranslationCreateParameters glossary_term_translation_create_parameters: (required)
        :param str x_phrase_app_otp: Two-Factor-Authentication token (optional)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GlossaryTermTranslation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.glossary_term_translation_create_with_http_info(account_id, glossary_id, term_id, glossary_term_translation_create_parameters, **kwargs)  # noqa: E501

    def glossary_term_translation_create_with_http_info(self, account_id, glossary_id, term_id, glossary_term_translation_create_parameters, **kwargs):  # noqa: E501
        """Create a translation for a term  # noqa: E501

        Create a new translation for a term in a term base (previously: glossary).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.glossary_term_translation_create_with_http_info(account_id, glossary_id, term_id, glossary_term_translation_create_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account_id: Account ID (required)
        :param str glossary_id: Glossary ID (required)
        :param str term_id: Term ID (required)
        :param GlossaryTermTranslationCreateParameters glossary_term_translation_create_parameters: (required)
        :param str x_phrase_app_otp: Two-Factor-Authentication token (optional)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GlossaryTermTranslation, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account_id',
            'glossary_id',
            'term_id',
            'glossary_term_translation_create_parameters',
            'x_phrase_app_otp'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method glossary_term_translation_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['account_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `account_id` when calling `glossary_term_translation_create`")  # noqa: E501
        # verify the required parameter 'glossary_id' is set
        if self.api_client.client_side_validation and ('glossary_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['glossary_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `glossary_id` when calling `glossary_term_translation_create`")  # noqa: E501
        # verify the required parameter 'term_id' is set
        if self.api_client.client_side_validation and ('term_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['term_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `term_id` when calling `glossary_term_translation_create`")  # noqa: E501
        # verify the required parameter 'glossary_term_translation_create_parameters' is set
        if self.api_client.client_side_validation and ('glossary_term_translation_create_parameters' not in local_var_params or  # noqa: E501
                                                        local_var_params['glossary_term_translation_create_parameters'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `glossary_term_translation_create_parameters` when calling `glossary_term_translation_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in local_var_params:
            path_params['account_id'] = local_var_params['account_id']  # noqa: E501
        if 'glossary_id' in local_var_params:
            path_params['glossary_id'] = local_var_params['glossary_id']  # noqa: E501
        if 'term_id' in local_var_params:
            path_params['term_id'] = local_var_params['term_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_phrase_app_otp' in local_var_params:
            header_params['X-PhraseApp-OTP'] = local_var_params['x_phrase_app_otp']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'glossary_term_translation_create_parameters' in local_var_params:
            body_params = local_var_params['glossary_term_translation_create_parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{account_id}/glossaries/{glossary_id}/terms/{term_id}/translations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GlossaryTermTranslation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def glossary_term_translation_delete(self, account_id, glossary_id, term_id, id, **kwargs):  # noqa: E501
        """Delete a translation for a term  # noqa: E501

        Delete an existing translation of a term in a term base (previously: glossary).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.glossary_term_translation_delete(account_id, glossary_id, term_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account_id: Account ID (required)
        :param str glossary_id: Glossary ID (required)
        :param str term_id: Term ID (required)
        :param str id: ID (required)
        :param str x_phrase_app_otp: Two-Factor-Authentication token (optional)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.glossary_term_translation_delete_with_http_info(account_id, glossary_id, term_id, id, **kwargs)  # noqa: E501

    def glossary_term_translation_delete_with_http_info(self, account_id, glossary_id, term_id, id, **kwargs):  # noqa: E501
        """Delete a translation for a term  # noqa: E501

        Delete an existing translation of a term in a term base (previously: glossary).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.glossary_term_translation_delete_with_http_info(account_id, glossary_id, term_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account_id: Account ID (required)
        :param str glossary_id: Glossary ID (required)
        :param str term_id: Term ID (required)
        :param str id: ID (required)
        :param str x_phrase_app_otp: Two-Factor-Authentication token (optional)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account_id',
            'glossary_id',
            'term_id',
            'id',
            'x_phrase_app_otp'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method glossary_term_translation_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['account_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `account_id` when calling `glossary_term_translation_delete`")  # noqa: E501
        # verify the required parameter 'glossary_id' is set
        if self.api_client.client_side_validation and ('glossary_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['glossary_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `glossary_id` when calling `glossary_term_translation_delete`")  # noqa: E501
        # verify the required parameter 'term_id' is set
        if self.api_client.client_side_validation and ('term_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['term_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `term_id` when calling `glossary_term_translation_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `glossary_term_translation_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in local_var_params:
            path_params['account_id'] = local_var_params['account_id']  # noqa: E501
        if 'glossary_id' in local_var_params:
            path_params['glossary_id'] = local_var_params['glossary_id']  # noqa: E501
        if 'term_id' in local_var_params:
            path_params['term_id'] = local_var_params['term_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_phrase_app_otp' in local_var_params:
            header_params['X-PhraseApp-OTP'] = local_var_params['x_phrase_app_otp']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{account_id}/glossaries/{glossary_id}/terms/{term_id}/translations/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def glossary_term_translation_update(self, account_id, glossary_id, term_id, id, glossary_term_translation_update_parameters, **kwargs):  # noqa: E501
        """Update a translation for a term  # noqa: E501

        Update an existing translation for a term in a term base (previously: glossary).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.glossary_term_translation_update(account_id, glossary_id, term_id, id, glossary_term_translation_update_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account_id: Account ID (required)
        :param str glossary_id: Glossary ID (required)
        :param str term_id: Term ID (required)
        :param str id: ID (required)
        :param GlossaryTermTranslationUpdateParameters glossary_term_translation_update_parameters: (required)
        :param str x_phrase_app_otp: Two-Factor-Authentication token (optional)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GlossaryTermTranslation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.glossary_term_translation_update_with_http_info(account_id, glossary_id, term_id, id, glossary_term_translation_update_parameters, **kwargs)  # noqa: E501

    def glossary_term_translation_update_with_http_info(self, account_id, glossary_id, term_id, id, glossary_term_translation_update_parameters, **kwargs):  # noqa: E501
        """Update a translation for a term  # noqa: E501

        Update an existing translation for a term in a term base (previously: glossary).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.glossary_term_translation_update_with_http_info(account_id, glossary_id, term_id, id, glossary_term_translation_update_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account_id: Account ID (required)
        :param str glossary_id: Glossary ID (required)
        :param str term_id: Term ID (required)
        :param str id: ID (required)
        :param GlossaryTermTranslationUpdateParameters glossary_term_translation_update_parameters: (required)
        :param str x_phrase_app_otp: Two-Factor-Authentication token (optional)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GlossaryTermTranslation, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account_id',
            'glossary_id',
            'term_id',
            'id',
            'glossary_term_translation_update_parameters',
            'x_phrase_app_otp'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method glossary_term_translation_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['account_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `account_id` when calling `glossary_term_translation_update`")  # noqa: E501
        # verify the required parameter 'glossary_id' is set
        if self.api_client.client_side_validation and ('glossary_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['glossary_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `glossary_id` when calling `glossary_term_translation_update`")  # noqa: E501
        # verify the required parameter 'term_id' is set
        if self.api_client.client_side_validation and ('term_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['term_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `term_id` when calling `glossary_term_translation_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `glossary_term_translation_update`")  # noqa: E501
        # verify the required parameter 'glossary_term_translation_update_parameters' is set
        if self.api_client.client_side_validation and ('glossary_term_translation_update_parameters' not in local_var_params or  # noqa: E501
                                                        local_var_params['glossary_term_translation_update_parameters'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `glossary_term_translation_update_parameters` when calling `glossary_term_translation_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in local_var_params:
            path_params['account_id'] = local_var_params['account_id']  # noqa: E501
        if 'glossary_id' in local_var_params:
            path_params['glossary_id'] = local_var_params['glossary_id']  # noqa: E501
        if 'term_id' in local_var_params:
            path_params['term_id'] = local_var_params['term_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_phrase_app_otp' in local_var_params:
            header_params['X-PhraseApp-OTP'] = local_var_params['x_phrase_app_otp']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'glossary_term_translation_update_parameters' in local_var_params:
            body_params = local_var_params['glossary_term_translation_update_parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{account_id}/glossaries/{glossary_id}/terms/{term_id}/translations/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GlossaryTermTranslation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
