# coding: utf-8

"""
    Phrase Strings API Reference

    The version of the OpenAPI document: 2.0.0
    Contact: support@phrase.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from phrase_api.configuration import Configuration


class ProjectsQualityPerformanceScore200ResponseAnyOfDataTranslationsInner(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'engine': 'str',
        'score': 'float',
        'id': 'str'
    }

    attribute_map = {
        'engine': 'engine',
        'score': 'score',
        'id': 'id'
    }

    def __init__(self, engine=None, score=None, id=None, local_vars_configuration=None):  # noqa: E501
        """ProjectsQualityPerformanceScore200ResponseAnyOfDataTranslationsInner - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._engine = None
        self._score = None
        self._id = None
        self.discriminator = None

        if engine is not None:
            self.engine = engine
        if score is not None:
            self.score = score
        if id is not None:
            self.id = id

    @property
    def engine(self):
        """Gets the engine of this ProjectsQualityPerformanceScore200ResponseAnyOfDataTranslationsInner.  # noqa: E501

        Engine used for the translation scoring  # noqa: E501

        :return: The engine of this ProjectsQualityPerformanceScore200ResponseAnyOfDataTranslationsInner.  # noqa: E501
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this ProjectsQualityPerformanceScore200ResponseAnyOfDataTranslationsInner.

        Engine used for the translation scoring  # noqa: E501

        :param engine: The engine of this ProjectsQualityPerformanceScore200ResponseAnyOfDataTranslationsInner.  # noqa: E501
        :type: str
        """

        self._engine = engine

    @property
    def score(self):
        """Gets the score of this ProjectsQualityPerformanceScore200ResponseAnyOfDataTranslationsInner.  # noqa: E501

        Quality score for the translation  # noqa: E501

        :return: The score of this ProjectsQualityPerformanceScore200ResponseAnyOfDataTranslationsInner.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ProjectsQualityPerformanceScore200ResponseAnyOfDataTranslationsInner.

        Quality score for the translation  # noqa: E501

        :param score: The score of this ProjectsQualityPerformanceScore200ResponseAnyOfDataTranslationsInner.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def id(self):
        """Gets the id of this ProjectsQualityPerformanceScore200ResponseAnyOfDataTranslationsInner.  # noqa: E501

        One of the translation ids passed in arguments  # noqa: E501

        :return: The id of this ProjectsQualityPerformanceScore200ResponseAnyOfDataTranslationsInner.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectsQualityPerformanceScore200ResponseAnyOfDataTranslationsInner.

        One of the translation ids passed in arguments  # noqa: E501

        :param id: The id of this ProjectsQualityPerformanceScore200ResponseAnyOfDataTranslationsInner.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectsQualityPerformanceScore200ResponseAnyOfDataTranslationsInner):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectsQualityPerformanceScore200ResponseAnyOfDataTranslationsInner):
            return True

        return self.to_dict() != other.to_dict()
