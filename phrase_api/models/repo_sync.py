# coding: utf-8

"""
    Phrase Strings API Reference

    The version of the OpenAPI document: 2.0.0
    Contact: support@phrase.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from phrase_api.configuration import Configuration


class RepoSync(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'project': 'ProjectShort',
        'provider': 'str',
        'enabled': 'bool',
        'auto_import': 'bool',
        'repo_name': 'str',
        'created_at': 'datetime',
        'last_import_at': 'datetime',
        'last_export_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'project': 'project',
        'provider': 'provider',
        'enabled': 'enabled',
        'auto_import': 'auto_import',
        'repo_name': 'repo_name',
        'created_at': 'created_at',
        'last_import_at': 'last_import_at',
        'last_export_at': 'last_export_at'
    }

    def __init__(self, id=None, project=None, provider=None, enabled=None, auto_import=None, repo_name=None, created_at=None, last_import_at=None, last_export_at=None, local_vars_configuration=None):  # noqa: E501
        """RepoSync - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._project = None
        self._provider = None
        self._enabled = None
        self._auto_import = None
        self._repo_name = None
        self._created_at = None
        self._last_import_at = None
        self._last_export_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if project is not None:
            self.project = project
        if provider is not None:
            self.provider = provider
        if enabled is not None:
            self.enabled = enabled
        if auto_import is not None:
            self.auto_import = auto_import
        if repo_name is not None:
            self.repo_name = repo_name
        if created_at is not None:
            self.created_at = created_at
        if last_import_at is not None:
            self.last_import_at = last_import_at
        if last_export_at is not None:
            self.last_export_at = last_export_at

    @property
    def id(self):
        """Gets the id of this RepoSync.  # noqa: E501


        :return: The id of this RepoSync.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepoSync.


        :param id: The id of this RepoSync.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def project(self):
        """Gets the project of this RepoSync.  # noqa: E501


        :return: The project of this RepoSync.  # noqa: E501
        :rtype: ProjectShort
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this RepoSync.


        :param project: The project of this RepoSync.  # noqa: E501
        :type: ProjectShort
        """

        self._project = project

    @property
    def provider(self):
        """Gets the provider of this RepoSync.  # noqa: E501


        :return: The provider of this RepoSync.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this RepoSync.


        :param provider: The provider of this RepoSync.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def enabled(self):
        """Gets the enabled of this RepoSync.  # noqa: E501


        :return: The enabled of this RepoSync.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this RepoSync.


        :param enabled: The enabled of this RepoSync.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def auto_import(self):
        """Gets the auto_import of this RepoSync.  # noqa: E501


        :return: The auto_import of this RepoSync.  # noqa: E501
        :rtype: bool
        """
        return self._auto_import

    @auto_import.setter
    def auto_import(self, auto_import):
        """Sets the auto_import of this RepoSync.


        :param auto_import: The auto_import of this RepoSync.  # noqa: E501
        :type: bool
        """

        self._auto_import = auto_import

    @property
    def repo_name(self):
        """Gets the repo_name of this RepoSync.  # noqa: E501


        :return: The repo_name of this RepoSync.  # noqa: E501
        :rtype: str
        """
        return self._repo_name

    @repo_name.setter
    def repo_name(self, repo_name):
        """Sets the repo_name of this RepoSync.


        :param repo_name: The repo_name of this RepoSync.  # noqa: E501
        :type: str
        """

        self._repo_name = repo_name

    @property
    def created_at(self):
        """Gets the created_at of this RepoSync.  # noqa: E501


        :return: The created_at of this RepoSync.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RepoSync.


        :param created_at: The created_at of this RepoSync.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def last_import_at(self):
        """Gets the last_import_at of this RepoSync.  # noqa: E501


        :return: The last_import_at of this RepoSync.  # noqa: E501
        :rtype: datetime
        """
        return self._last_import_at

    @last_import_at.setter
    def last_import_at(self, last_import_at):
        """Sets the last_import_at of this RepoSync.


        :param last_import_at: The last_import_at of this RepoSync.  # noqa: E501
        :type: datetime
        """

        self._last_import_at = last_import_at

    @property
    def last_export_at(self):
        """Gets the last_export_at of this RepoSync.  # noqa: E501


        :return: The last_export_at of this RepoSync.  # noqa: E501
        :rtype: datetime
        """
        return self._last_export_at

    @last_export_at.setter
    def last_export_at(self, last_export_at):
        """Sets the last_export_at of this RepoSync.


        :param last_export_at: The last_export_at of this RepoSync.  # noqa: E501
        :type: datetime
        """

        self._last_export_at = last_export_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepoSync):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RepoSync):
            return True

        return self.to_dict() != other.to_dict()
