# coding: utf-8

"""
    Phrase Strings API Reference

    The version of the OpenAPI document: 2.0.0
    Contact: support@phrase.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from phrase_api.configuration import Configuration


class MemberProjectDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'email': 'str',
        'username': 'str',
        'role': 'str',
        'projects': 'List[ProjectLocales]',
        'permissions': 'object',
        'locale_ids': 'List[str]',
        'default_locale_codes': 'List[str]',
        'spaces': 'List[MemberSpacesInner]',
        'project_roles': 'List[MemberProjectDetailProjectRolesInner]'
    }

    attribute_map = {
        'id': 'id',
        'email': 'email',
        'username': 'username',
        'role': 'role',
        'projects': 'projects',
        'permissions': 'permissions',
        'locale_ids': 'locale_ids',
        'default_locale_codes': 'default_locale_codes',
        'spaces': 'spaces',
        'project_roles': 'project_roles'
    }

    def __init__(self, id=None, email=None, username=None, role=None, projects=None, permissions=None, locale_ids=None, default_locale_codes=None, spaces=None, project_roles=None, local_vars_configuration=None):  # noqa: E501
        """MemberProjectDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._email = None
        self._username = None
        self._role = None
        self._projects = None
        self._permissions = None
        self._locale_ids = None
        self._default_locale_codes = None
        self._spaces = None
        self._project_roles = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if email is not None:
            self.email = email
        if username is not None:
            self.username = username
        if role is not None:
            self.role = role
        if projects is not None:
            self.projects = projects
        if permissions is not None:
            self.permissions = permissions
        if locale_ids is not None:
            self.locale_ids = locale_ids
        if default_locale_codes is not None:
            self.default_locale_codes = default_locale_codes
        if spaces is not None:
            self.spaces = spaces
        if project_roles is not None:
            self.project_roles = project_roles

    @property
    def id(self):
        """Gets the id of this MemberProjectDetail.  # noqa: E501


        :return: The id of this MemberProjectDetail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MemberProjectDetail.


        :param id: The id of this MemberProjectDetail.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this MemberProjectDetail.  # noqa: E501


        :return: The email of this MemberProjectDetail.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this MemberProjectDetail.


        :param email: The email of this MemberProjectDetail.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def username(self):
        """Gets the username of this MemberProjectDetail.  # noqa: E501


        :return: The username of this MemberProjectDetail.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this MemberProjectDetail.


        :param username: The username of this MemberProjectDetail.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def role(self):
        """Gets the role of this MemberProjectDetail.  # noqa: E501


        :return: The role of this MemberProjectDetail.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this MemberProjectDetail.


        :param role: The role of this MemberProjectDetail.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def projects(self):
        """Gets the projects of this MemberProjectDetail.  # noqa: E501


        :return: The projects of this MemberProjectDetail.  # noqa: E501
        :rtype: List[ProjectLocales]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this MemberProjectDetail.


        :param projects: The projects of this MemberProjectDetail.  # noqa: E501
        :type: List[ProjectLocales]
        """

        self._projects = projects

    @property
    def permissions(self):
        """Gets the permissions of this MemberProjectDetail.  # noqa: E501


        :return: The permissions of this MemberProjectDetail.  # noqa: E501
        :rtype: object
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this MemberProjectDetail.


        :param permissions: The permissions of this MemberProjectDetail.  # noqa: E501
        :type: object
        """

        self._permissions = permissions

    @property
    def locale_ids(self):
        """Gets the locale_ids of this MemberProjectDetail.  # noqa: E501


        :return: The locale_ids of this MemberProjectDetail.  # noqa: E501
        :rtype: List[str]
        """
        return self._locale_ids

    @locale_ids.setter
    def locale_ids(self, locale_ids):
        """Sets the locale_ids of this MemberProjectDetail.


        :param locale_ids: The locale_ids of this MemberProjectDetail.  # noqa: E501
        :type: List[str]
        """

        self._locale_ids = locale_ids

    @property
    def default_locale_codes(self):
        """Gets the default_locale_codes of this MemberProjectDetail.  # noqa: E501


        :return: The default_locale_codes of this MemberProjectDetail.  # noqa: E501
        :rtype: List[str]
        """
        return self._default_locale_codes

    @default_locale_codes.setter
    def default_locale_codes(self, default_locale_codes):
        """Sets the default_locale_codes of this MemberProjectDetail.


        :param default_locale_codes: The default_locale_codes of this MemberProjectDetail.  # noqa: E501
        :type: List[str]
        """

        self._default_locale_codes = default_locale_codes

    @property
    def spaces(self):
        """Gets the spaces of this MemberProjectDetail.  # noqa: E501


        :return: The spaces of this MemberProjectDetail.  # noqa: E501
        :rtype: List[MemberSpacesInner]
        """
        return self._spaces

    @spaces.setter
    def spaces(self, spaces):
        """Sets the spaces of this MemberProjectDetail.


        :param spaces: The spaces of this MemberProjectDetail.  # noqa: E501
        :type: List[MemberSpacesInner]
        """

        self._spaces = spaces

    @property
    def project_roles(self):
        """Gets the project_roles of this MemberProjectDetail.  # noqa: E501


        :return: The project_roles of this MemberProjectDetail.  # noqa: E501
        :rtype: List[MemberProjectDetailProjectRolesInner]
        """
        return self._project_roles

    @project_roles.setter
    def project_roles(self, project_roles):
        """Sets the project_roles of this MemberProjectDetail.


        :param project_roles: The project_roles of this MemberProjectDetail.  # noqa: E501
        :type: List[MemberProjectDetailProjectRolesInner]
        """

        self._project_roles = project_roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberProjectDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MemberProjectDetail):
            return True

        return self.to_dict() != other.to_dict()
