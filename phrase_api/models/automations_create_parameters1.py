# coding: utf-8

"""
    Phrase Strings API Reference

    The version of the OpenAPI document: 2.0.0
    Contact: support@phrase.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from phrase_api.configuration import Configuration


class AutomationsCreateParameters1(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'trigger': 'str',
        'project_ids': 'List[str]',
        'job_template_id': 'str',
        'status_filters': 'List[str]',
        'tags': 'List[str]',
        'cron_schedule': 'str',
        'time_zone': 'str'
    }

    attribute_map = {
        'name': 'name',
        'trigger': 'trigger',
        'project_ids': 'project_ids',
        'job_template_id': 'job_template_id',
        'status_filters': 'status_filters',
        'tags': 'tags',
        'cron_schedule': 'cron_schedule',
        'time_zone': 'time_zone'
    }

    def __init__(self, name=None, trigger=None, project_ids=None, job_template_id=None, status_filters=None, tags=None, cron_schedule=None, time_zone=None, local_vars_configuration=None):  # noqa: E501
        """AutomationsCreateParameters1 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._trigger = None
        self._project_ids = None
        self._job_template_id = None
        self._status_filters = None
        self._tags = None
        self._cron_schedule = None
        self._time_zone = None
        self.discriminator = None

        self.name = name
        self.trigger = trigger
        self.project_ids = project_ids
        if job_template_id is not None:
            self.job_template_id = job_template_id
        self.status_filters = status_filters
        if tags is not None:
            self.tags = tags
        if cron_schedule is not None:
            self.cron_schedule = cron_schedule
        if time_zone is not None:
            self.time_zone = time_zone

    @property
    def name(self):
        """Gets the name of this AutomationsCreateParameters1.  # noqa: E501

        name of the automation  # noqa: E501

        :return: The name of this AutomationsCreateParameters1.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutomationsCreateParameters1.

        name of the automation  # noqa: E501

        :param name: The name of this AutomationsCreateParameters1.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def trigger(self):
        """Gets the trigger of this AutomationsCreateParameters1.  # noqa: E501


        :return: The trigger of this AutomationsCreateParameters1.  # noqa: E501
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this AutomationsCreateParameters1.


        :param trigger: The trigger of this AutomationsCreateParameters1.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and trigger is None:  # noqa: E501
            raise ValueError("Invalid value for `trigger`, must not be `None`")  # noqa: E501
        allowed_values = ["schedule", "upload"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and trigger not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `trigger` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger, allowed_values)
            )

        self._trigger = trigger

    @property
    def project_ids(self):
        """Gets the project_ids of this AutomationsCreateParameters1.  # noqa: E501

        List of project IDs to associate with the automation. Currently, only the first ID in the array is used. The array format leaves room for future support of multiple projects.   # noqa: E501

        :return: The project_ids of this AutomationsCreateParameters1.  # noqa: E501
        :rtype: List[str]
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids):
        """Sets the project_ids of this AutomationsCreateParameters1.

        List of project IDs to associate with the automation. Currently, only the first ID in the array is used. The array format leaves room for future support of multiple projects.   # noqa: E501

        :param project_ids: The project_ids of this AutomationsCreateParameters1.  # noqa: E501
        :type: List[str]
        """
        if self.local_vars_configuration.client_side_validation and project_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `project_ids`, must not be `None`")  # noqa: E501

        self._project_ids = project_ids

    @property
    def job_template_id(self):
        """Gets the job_template_id of this AutomationsCreateParameters1.  # noqa: E501

        id of job template that the automation uses to create jobs from  # noqa: E501

        :return: The job_template_id of this AutomationsCreateParameters1.  # noqa: E501
        :rtype: str
        """
        return self._job_template_id

    @job_template_id.setter
    def job_template_id(self, job_template_id):
        """Sets the job_template_id of this AutomationsCreateParameters1.

        id of job template that the automation uses to create jobs from  # noqa: E501

        :param job_template_id: The job_template_id of this AutomationsCreateParameters1.  # noqa: E501
        :type: str
        """

        self._job_template_id = job_template_id

    @property
    def status_filters(self):
        """Gets the status_filters of this AutomationsCreateParameters1.  # noqa: E501

        translation key statuses used to filter keys that are added to jobs  # noqa: E501

        :return: The status_filters of this AutomationsCreateParameters1.  # noqa: E501
        :rtype: List[str]
        """
        return self._status_filters

    @status_filters.setter
    def status_filters(self, status_filters):
        """Sets the status_filters of this AutomationsCreateParameters1.

        translation key statuses used to filter keys that are added to jobs  # noqa: E501

        :param status_filters: The status_filters of this AutomationsCreateParameters1.  # noqa: E501
        :type: List[str]
        """
        if self.local_vars_configuration.client_side_validation and status_filters is None:  # noqa: E501
            raise ValueError("Invalid value for `status_filters`, must not be `None`")  # noqa: E501
        allowed_values = ["unverified", "untranslated", "ready_for_review"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(status_filters).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `status_filters` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(status_filters) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._status_filters = status_filters

    @property
    def tags(self):
        """Gets the tags of this AutomationsCreateParameters1.  # noqa: E501

        used to filter which keys are added to jobs  # noqa: E501

        :return: The tags of this AutomationsCreateParameters1.  # noqa: E501
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AutomationsCreateParameters1.

        used to filter which keys are added to jobs  # noqa: E501

        :param tags: The tags of this AutomationsCreateParameters1.  # noqa: E501
        :type: List[str]
        """

        self._tags = tags

    @property
    def cron_schedule(self):
        """Gets the cron_schedule of this AutomationsCreateParameters1.  # noqa: E501

        along with time_zone, specifies when the scheduled automation is supposed to run  # noqa: E501

        :return: The cron_schedule of this AutomationsCreateParameters1.  # noqa: E501
        :rtype: str
        """
        return self._cron_schedule

    @cron_schedule.setter
    def cron_schedule(self, cron_schedule):
        """Sets the cron_schedule of this AutomationsCreateParameters1.

        along with time_zone, specifies when the scheduled automation is supposed to run  # noqa: E501

        :param cron_schedule: The cron_schedule of this AutomationsCreateParameters1.  # noqa: E501
        :type: str
        """

        self._cron_schedule = cron_schedule

    @property
    def time_zone(self):
        """Gets the time_zone of this AutomationsCreateParameters1.  # noqa: E501

        along with cron_schedule, specifies when the scheduled automation is supposed to run  # noqa: E501

        :return: The time_zone of this AutomationsCreateParameters1.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this AutomationsCreateParameters1.

        along with cron_schedule, specifies when the scheduled automation is supposed to run  # noqa: E501

        :param time_zone: The time_zone of this AutomationsCreateParameters1.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomationsCreateParameters1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AutomationsCreateParameters1):
            return True

        return self.to_dict() != other.to_dict()
