# coding: utf-8

"""
    Phrase Strings API Reference

    The version of the OpenAPI document: 2.0.0
    Contact: support@phrase.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from phrase_api.configuration import Configuration


class LocaleDownloadParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_format': 'str',
        'locale_id': 'str',
        'tags': 'str',
        'branch': 'str',
        'include_empty_translations': 'bool',
        'include_translated_keys': 'bool',
        'include_unverified_translations': 'bool'
    }

    attribute_map = {
        'file_format': 'file_format',
        'locale_id': 'locale_id',
        'tags': 'tags',
        'branch': 'branch',
        'include_empty_translations': 'include_empty_translations',
        'include_translated_keys': 'include_translated_keys',
        'include_unverified_translations': 'include_unverified_translations'
    }

    def __init__(self, file_format=None, locale_id=None, tags=None, branch=None, include_empty_translations=None, include_translated_keys=None, include_unverified_translations=None, local_vars_configuration=None):  # noqa: E501
        """LocaleDownloadParams - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_format = None
        self._locale_id = None
        self._tags = None
        self._branch = None
        self._include_empty_translations = None
        self._include_translated_keys = None
        self._include_unverified_translations = None
        self.discriminator = None

        if file_format is not None:
            self.file_format = file_format
        if locale_id is not None:
            self.locale_id = locale_id
        if tags is not None:
            self.tags = tags
        if branch is not None:
            self.branch = branch
        if include_empty_translations is not None:
            self.include_empty_translations = include_empty_translations
        if include_translated_keys is not None:
            self.include_translated_keys = include_translated_keys
        if include_unverified_translations is not None:
            self.include_unverified_translations = include_unverified_translations

    @property
    def file_format(self):
        """Gets the file_format of this LocaleDownloadParams.  # noqa: E501


        :return: The file_format of this LocaleDownloadParams.  # noqa: E501
        :rtype: str
        """
        return self._file_format

    @file_format.setter
    def file_format(self, file_format):
        """Sets the file_format of this LocaleDownloadParams.


        :param file_format: The file_format of this LocaleDownloadParams.  # noqa: E501
        :type: str
        """

        self._file_format = file_format

    @property
    def locale_id(self):
        """Gets the locale_id of this LocaleDownloadParams.  # noqa: E501


        :return: The locale_id of this LocaleDownloadParams.  # noqa: E501
        :rtype: str
        """
        return self._locale_id

    @locale_id.setter
    def locale_id(self, locale_id):
        """Sets the locale_id of this LocaleDownloadParams.


        :param locale_id: The locale_id of this LocaleDownloadParams.  # noqa: E501
        :type: str
        """

        self._locale_id = locale_id

    @property
    def tags(self):
        """Gets the tags of this LocaleDownloadParams.  # noqa: E501


        :return: The tags of this LocaleDownloadParams.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this LocaleDownloadParams.


        :param tags: The tags of this LocaleDownloadParams.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def branch(self):
        """Gets the branch of this LocaleDownloadParams.  # noqa: E501


        :return: The branch of this LocaleDownloadParams.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this LocaleDownloadParams.


        :param branch: The branch of this LocaleDownloadParams.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def include_empty_translations(self):
        """Gets the include_empty_translations of this LocaleDownloadParams.  # noqa: E501


        :return: The include_empty_translations of this LocaleDownloadParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_empty_translations

    @include_empty_translations.setter
    def include_empty_translations(self, include_empty_translations):
        """Sets the include_empty_translations of this LocaleDownloadParams.


        :param include_empty_translations: The include_empty_translations of this LocaleDownloadParams.  # noqa: E501
        :type: bool
        """

        self._include_empty_translations = include_empty_translations

    @property
    def include_translated_keys(self):
        """Gets the include_translated_keys of this LocaleDownloadParams.  # noqa: E501


        :return: The include_translated_keys of this LocaleDownloadParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_translated_keys

    @include_translated_keys.setter
    def include_translated_keys(self, include_translated_keys):
        """Sets the include_translated_keys of this LocaleDownloadParams.


        :param include_translated_keys: The include_translated_keys of this LocaleDownloadParams.  # noqa: E501
        :type: bool
        """

        self._include_translated_keys = include_translated_keys

    @property
    def include_unverified_translations(self):
        """Gets the include_unverified_translations of this LocaleDownloadParams.  # noqa: E501


        :return: The include_unverified_translations of this LocaleDownloadParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_unverified_translations

    @include_unverified_translations.setter
    def include_unverified_translations(self, include_unverified_translations):
        """Sets the include_unverified_translations of this LocaleDownloadParams.


        :param include_unverified_translations: The include_unverified_translations of this LocaleDownloadParams.  # noqa: E501
        :type: bool
        """

        self._include_unverified_translations = include_unverified_translations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocaleDownloadParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocaleDownloadParams):
            return True

        return self.to_dict() != other.to_dict()
