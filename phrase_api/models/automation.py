# coding: utf-8

"""
    Phrase Strings API Reference

    The version of the OpenAPI document: 2.0.0
    Contact: support@phrase.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from phrase_api.configuration import Configuration


class Automation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'status': 'str',
        'trigger': 'str',
        'status_filters': 'List[str]',
        'project_id': 'str',
        'job_template_id': 'str',
        'tags': 'List[str]',
        'cron_schedule': 'str',
        'time_zone': 'str',
        'account': 'Account',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'status': 'status',
        'trigger': 'trigger',
        'status_filters': 'status_filters',
        'project_id': 'project_id',
        'job_template_id': 'job_template_id',
        'tags': 'tags',
        'cron_schedule': 'cron_schedule',
        'time_zone': 'time_zone',
        'account': 'account',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, name=None, status=None, trigger=None, status_filters=None, project_id=None, job_template_id=None, tags=None, cron_schedule=None, time_zone=None, account=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """Automation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._status = None
        self._trigger = None
        self._status_filters = None
        self._project_id = None
        self._job_template_id = None
        self._tags = None
        self._cron_schedule = None
        self._time_zone = None
        self._account = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if trigger is not None:
            self.trigger = trigger
        if status_filters is not None:
            self.status_filters = status_filters
        if project_id is not None:
            self.project_id = project_id
        if job_template_id is not None:
            self.job_template_id = job_template_id
        if tags is not None:
            self.tags = tags
        if cron_schedule is not None:
            self.cron_schedule = cron_schedule
        if time_zone is not None:
            self.time_zone = time_zone
        if account is not None:
            self.account = account
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Automation.  # noqa: E501


        :return: The id of this Automation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Automation.


        :param id: The id of this Automation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Automation.  # noqa: E501


        :return: The name of this Automation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Automation.


        :param name: The name of this Automation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Automation.  # noqa: E501


        :return: The status of this Automation.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Automation.


        :param status: The status of this Automation.  # noqa: E501
        :type: str
        """
        allowed_values = ["inactive", "active", "error"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def trigger(self):
        """Gets the trigger of this Automation.  # noqa: E501


        :return: The trigger of this Automation.  # noqa: E501
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this Automation.


        :param trigger: The trigger of this Automation.  # noqa: E501
        :type: str
        """
        allowed_values = ["schedule", "upload"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and trigger not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `trigger` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger, allowed_values)
            )

        self._trigger = trigger

    @property
    def status_filters(self):
        """Gets the status_filters of this Automation.  # noqa: E501

        translation key statuses used to filter keys that are added to jobs  # noqa: E501

        :return: The status_filters of this Automation.  # noqa: E501
        :rtype: List[str]
        """
        return self._status_filters

    @status_filters.setter
    def status_filters(self, status_filters):
        """Sets the status_filters of this Automation.

        translation key statuses used to filter keys that are added to jobs  # noqa: E501

        :param status_filters: The status_filters of this Automation.  # noqa: E501
        :type: List[str]
        """
        allowed_values = ["unverified", "untranslated", "ready_for_review"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(status_filters).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `status_filters` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(status_filters) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._status_filters = status_filters

    @property
    def project_id(self):
        """Gets the project_id of this Automation.  # noqa: E501


        :return: The project_id of this Automation.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Automation.


        :param project_id: The project_id of this Automation.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def job_template_id(self):
        """Gets the job_template_id of this Automation.  # noqa: E501


        :return: The job_template_id of this Automation.  # noqa: E501
        :rtype: str
        """
        return self._job_template_id

    @job_template_id.setter
    def job_template_id(self, job_template_id):
        """Sets the job_template_id of this Automation.


        :param job_template_id: The job_template_id of this Automation.  # noqa: E501
        :type: str
        """

        self._job_template_id = job_template_id

    @property
    def tags(self):
        """Gets the tags of this Automation.  # noqa: E501


        :return: The tags of this Automation.  # noqa: E501
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Automation.


        :param tags: The tags of this Automation.  # noqa: E501
        :type: List[str]
        """

        self._tags = tags

    @property
    def cron_schedule(self):
        """Gets the cron_schedule of this Automation.  # noqa: E501


        :return: The cron_schedule of this Automation.  # noqa: E501
        :rtype: str
        """
        return self._cron_schedule

    @cron_schedule.setter
    def cron_schedule(self, cron_schedule):
        """Sets the cron_schedule of this Automation.


        :param cron_schedule: The cron_schedule of this Automation.  # noqa: E501
        :type: str
        """

        self._cron_schedule = cron_schedule

    @property
    def time_zone(self):
        """Gets the time_zone of this Automation.  # noqa: E501


        :return: The time_zone of this Automation.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Automation.


        :param time_zone: The time_zone of this Automation.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def account(self):
        """Gets the account of this Automation.  # noqa: E501


        :return: The account of this Automation.  # noqa: E501
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Automation.


        :param account: The account of this Automation.  # noqa: E501
        :type: Account
        """

        self._account = account

    @property
    def created_at(self):
        """Gets the created_at of this Automation.  # noqa: E501


        :return: The created_at of this Automation.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Automation.


        :param created_at: The created_at of this Automation.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Automation.  # noqa: E501


        :return: The updated_at of this Automation.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Automation.


        :param updated_at: The updated_at of this Automation.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Automation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Automation):
            return True

        return self.to_dict() != other.to_dict()
