# coding: utf-8

"""
    Phrase Strings API Reference

    The version of the OpenAPI document: 2.0.0
    Contact: support@phrase.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from phrase_api.configuration import Configuration


class GitlabSync(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'project_id': 'str',
        'gitlab_project_id': 'int',
        'gitlab_branch_name': 'str',
        'auto_import': 'bool',
        'auto_import_secret': 'str',
        'auto_import_url': 'str',
        'self_hosted_api_url': 'str',
        'last_exported_at': 'datetime',
        'last_imported_at': 'datetime',
        'last_status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'project_id': 'project_id',
        'gitlab_project_id': 'gitlab_project_id',
        'gitlab_branch_name': 'gitlab_branch_name',
        'auto_import': 'auto_import',
        'auto_import_secret': 'auto_import_secret',
        'auto_import_url': 'auto_import_url',
        'self_hosted_api_url': 'self_hosted_api_url',
        'last_exported_at': 'last_exported_at',
        'last_imported_at': 'last_imported_at',
        'last_status': 'last_status'
    }

    def __init__(self, id=None, project_id=None, gitlab_project_id=None, gitlab_branch_name=None, auto_import=None, auto_import_secret=None, auto_import_url=None, self_hosted_api_url=None, last_exported_at=None, last_imported_at=None, last_status=None, local_vars_configuration=None):  # noqa: E501
        """GitlabSync - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._project_id = None
        self._gitlab_project_id = None
        self._gitlab_branch_name = None
        self._auto_import = None
        self._auto_import_secret = None
        self._auto_import_url = None
        self._self_hosted_api_url = None
        self._last_exported_at = None
        self._last_imported_at = None
        self._last_status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if project_id is not None:
            self.project_id = project_id
        if gitlab_project_id is not None:
            self.gitlab_project_id = gitlab_project_id
        if gitlab_branch_name is not None:
            self.gitlab_branch_name = gitlab_branch_name
        if auto_import is not None:
            self.auto_import = auto_import
        if auto_import_secret is not None:
            self.auto_import_secret = auto_import_secret
        if auto_import_url is not None:
            self.auto_import_url = auto_import_url
        if self_hosted_api_url is not None:
            self.self_hosted_api_url = self_hosted_api_url
        if last_exported_at is not None:
            self.last_exported_at = last_exported_at
        if last_imported_at is not None:
            self.last_imported_at = last_imported_at
        if last_status is not None:
            self.last_status = last_status

    @property
    def id(self):
        """Gets the id of this GitlabSync.  # noqa: E501


        :return: The id of this GitlabSync.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GitlabSync.


        :param id: The id of this GitlabSync.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this GitlabSync.  # noqa: E501


        :return: The project_id of this GitlabSync.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GitlabSync.


        :param project_id: The project_id of this GitlabSync.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def gitlab_project_id(self):
        """Gets the gitlab_project_id of this GitlabSync.  # noqa: E501


        :return: The gitlab_project_id of this GitlabSync.  # noqa: E501
        :rtype: int
        """
        return self._gitlab_project_id

    @gitlab_project_id.setter
    def gitlab_project_id(self, gitlab_project_id):
        """Sets the gitlab_project_id of this GitlabSync.


        :param gitlab_project_id: The gitlab_project_id of this GitlabSync.  # noqa: E501
        :type: int
        """

        self._gitlab_project_id = gitlab_project_id

    @property
    def gitlab_branch_name(self):
        """Gets the gitlab_branch_name of this GitlabSync.  # noqa: E501


        :return: The gitlab_branch_name of this GitlabSync.  # noqa: E501
        :rtype: str
        """
        return self._gitlab_branch_name

    @gitlab_branch_name.setter
    def gitlab_branch_name(self, gitlab_branch_name):
        """Sets the gitlab_branch_name of this GitlabSync.


        :param gitlab_branch_name: The gitlab_branch_name of this GitlabSync.  # noqa: E501
        :type: str
        """

        self._gitlab_branch_name = gitlab_branch_name

    @property
    def auto_import(self):
        """Gets the auto_import of this GitlabSync.  # noqa: E501


        :return: The auto_import of this GitlabSync.  # noqa: E501
        :rtype: bool
        """
        return self._auto_import

    @auto_import.setter
    def auto_import(self, auto_import):
        """Sets the auto_import of this GitlabSync.


        :param auto_import: The auto_import of this GitlabSync.  # noqa: E501
        :type: bool
        """

        self._auto_import = auto_import

    @property
    def auto_import_secret(self):
        """Gets the auto_import_secret of this GitlabSync.  # noqa: E501


        :return: The auto_import_secret of this GitlabSync.  # noqa: E501
        :rtype: str
        """
        return self._auto_import_secret

    @auto_import_secret.setter
    def auto_import_secret(self, auto_import_secret):
        """Sets the auto_import_secret of this GitlabSync.


        :param auto_import_secret: The auto_import_secret of this GitlabSync.  # noqa: E501
        :type: str
        """

        self._auto_import_secret = auto_import_secret

    @property
    def auto_import_url(self):
        """Gets the auto_import_url of this GitlabSync.  # noqa: E501


        :return: The auto_import_url of this GitlabSync.  # noqa: E501
        :rtype: str
        """
        return self._auto_import_url

    @auto_import_url.setter
    def auto_import_url(self, auto_import_url):
        """Sets the auto_import_url of this GitlabSync.


        :param auto_import_url: The auto_import_url of this GitlabSync.  # noqa: E501
        :type: str
        """

        self._auto_import_url = auto_import_url

    @property
    def self_hosted_api_url(self):
        """Gets the self_hosted_api_url of this GitlabSync.  # noqa: E501


        :return: The self_hosted_api_url of this GitlabSync.  # noqa: E501
        :rtype: str
        """
        return self._self_hosted_api_url

    @self_hosted_api_url.setter
    def self_hosted_api_url(self, self_hosted_api_url):
        """Sets the self_hosted_api_url of this GitlabSync.


        :param self_hosted_api_url: The self_hosted_api_url of this GitlabSync.  # noqa: E501
        :type: str
        """

        self._self_hosted_api_url = self_hosted_api_url

    @property
    def last_exported_at(self):
        """Gets the last_exported_at of this GitlabSync.  # noqa: E501


        :return: The last_exported_at of this GitlabSync.  # noqa: E501
        :rtype: datetime
        """
        return self._last_exported_at

    @last_exported_at.setter
    def last_exported_at(self, last_exported_at):
        """Sets the last_exported_at of this GitlabSync.


        :param last_exported_at: The last_exported_at of this GitlabSync.  # noqa: E501
        :type: datetime
        """

        self._last_exported_at = last_exported_at

    @property
    def last_imported_at(self):
        """Gets the last_imported_at of this GitlabSync.  # noqa: E501


        :return: The last_imported_at of this GitlabSync.  # noqa: E501
        :rtype: datetime
        """
        return self._last_imported_at

    @last_imported_at.setter
    def last_imported_at(self, last_imported_at):
        """Sets the last_imported_at of this GitlabSync.


        :param last_imported_at: The last_imported_at of this GitlabSync.  # noqa: E501
        :type: datetime
        """

        self._last_imported_at = last_imported_at

    @property
    def last_status(self):
        """Gets the last_status of this GitlabSync.  # noqa: E501


        :return: The last_status of this GitlabSync.  # noqa: E501
        :rtype: str
        """
        return self._last_status

    @last_status.setter
    def last_status(self, last_status):
        """Sets the last_status of this GitlabSync.


        :param last_status: The last_status of this GitlabSync.  # noqa: E501
        :type: str
        """

        self._last_status = last_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GitlabSync):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GitlabSync):
            return True

        return self.to_dict() != other.to_dict()
