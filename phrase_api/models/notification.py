# coding: utf-8

"""
    Phrase Strings API Reference

    The version of the OpenAPI document: 2.0.0
    Contact: support@phrase.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from phrase_api.configuration import Configuration


class Notification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'event_name': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'delivered_at': 'datetime',
        'seen_at': 'datetime',
        'data': 'object',
        'resource': 'object',
        'locale': 'Locale',
        'user': 'UserPreview',
        'project': 'Project',
        'account': 'Account',
        'group': 'NotificationGroup'
    }

    attribute_map = {
        'id': 'id',
        'event_name': 'event_name',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'delivered_at': 'delivered_at',
        'seen_at': 'seen_at',
        'data': 'data',
        'resource': 'resource',
        'locale': 'locale',
        'user': 'user',
        'project': 'project',
        'account': 'account',
        'group': 'group'
    }

    def __init__(self, id=None, event_name=None, created_at=None, updated_at=None, delivered_at=None, seen_at=None, data=None, resource=None, locale=None, user=None, project=None, account=None, group=None, local_vars_configuration=None):  # noqa: E501
        """Notification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._event_name = None
        self._created_at = None
        self._updated_at = None
        self._delivered_at = None
        self._seen_at = None
        self._data = None
        self._resource = None
        self._locale = None
        self._user = None
        self._project = None
        self._account = None
        self._group = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if event_name is not None:
            self.event_name = event_name
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if delivered_at is not None:
            self.delivered_at = delivered_at
        if seen_at is not None:
            self.seen_at = seen_at
        if data is not None:
            self.data = data
        if resource is not None:
            self.resource = resource
        if locale is not None:
            self.locale = locale
        if user is not None:
            self.user = user
        if project is not None:
            self.project = project
        if account is not None:
            self.account = account
        if group is not None:
            self.group = group

    @property
    def id(self):
        """Gets the id of this Notification.  # noqa: E501


        :return: The id of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Notification.


        :param id: The id of this Notification.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def event_name(self):
        """Gets the event_name of this Notification.  # noqa: E501


        :return: The event_name of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this Notification.


        :param event_name: The event_name of this Notification.  # noqa: E501
        :type: str
        """

        self._event_name = event_name

    @property
    def created_at(self):
        """Gets the created_at of this Notification.  # noqa: E501


        :return: The created_at of this Notification.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Notification.


        :param created_at: The created_at of this Notification.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Notification.  # noqa: E501


        :return: The updated_at of this Notification.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Notification.


        :param updated_at: The updated_at of this Notification.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def delivered_at(self):
        """Gets the delivered_at of this Notification.  # noqa: E501


        :return: The delivered_at of this Notification.  # noqa: E501
        :rtype: datetime
        """
        return self._delivered_at

    @delivered_at.setter
    def delivered_at(self, delivered_at):
        """Sets the delivered_at of this Notification.


        :param delivered_at: The delivered_at of this Notification.  # noqa: E501
        :type: datetime
        """

        self._delivered_at = delivered_at

    @property
    def seen_at(self):
        """Gets the seen_at of this Notification.  # noqa: E501


        :return: The seen_at of this Notification.  # noqa: E501
        :rtype: datetime
        """
        return self._seen_at

    @seen_at.setter
    def seen_at(self, seen_at):
        """Sets the seen_at of this Notification.


        :param seen_at: The seen_at of this Notification.  # noqa: E501
        :type: datetime
        """

        self._seen_at = seen_at

    @property
    def data(self):
        """Gets the data of this Notification.  # noqa: E501


        :return: The data of this Notification.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Notification.


        :param data: The data of this Notification.  # noqa: E501
        :type: object
        """

        self._data = data

    @property
    def resource(self):
        """Gets the resource of this Notification.  # noqa: E501


        :return: The resource of this Notification.  # noqa: E501
        :rtype: object
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this Notification.


        :param resource: The resource of this Notification.  # noqa: E501
        :type: object
        """

        self._resource = resource

    @property
    def locale(self):
        """Gets the locale of this Notification.  # noqa: E501


        :return: The locale of this Notification.  # noqa: E501
        :rtype: Locale
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Notification.


        :param locale: The locale of this Notification.  # noqa: E501
        :type: Locale
        """

        self._locale = locale

    @property
    def user(self):
        """Gets the user of this Notification.  # noqa: E501


        :return: The user of this Notification.  # noqa: E501
        :rtype: UserPreview
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Notification.


        :param user: The user of this Notification.  # noqa: E501
        :type: UserPreview
        """

        self._user = user

    @property
    def project(self):
        """Gets the project of this Notification.  # noqa: E501


        :return: The project of this Notification.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Notification.


        :param project: The project of this Notification.  # noqa: E501
        :type: Project
        """

        self._project = project

    @property
    def account(self):
        """Gets the account of this Notification.  # noqa: E501


        :return: The account of this Notification.  # noqa: E501
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Notification.


        :param account: The account of this Notification.  # noqa: E501
        :type: Account
        """

        self._account = account

    @property
    def group(self):
        """Gets the group of this Notification.  # noqa: E501


        :return: The group of this Notification.  # noqa: E501
        :rtype: NotificationGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Notification.


        :param group: The group of this Notification.  # noqa: E501
        :type: NotificationGroup
        """

        self._group = group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Notification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Notification):
            return True

        return self.to_dict() != other.to_dict()
