# coding: utf-8

"""
    Phrase Strings API Reference

    The version of the OpenAPI document: 2.0.0
    Contact: support@phrase.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from phrase_api.configuration import Configuration


class LocaleDownloadCreateParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_format': 'str',
        'branch': 'str',
        'tags': 'str',
        'include_empty_translations': 'bool',
        'exclude_empty_zero_forms': 'bool',
        'include_translated_keys': 'bool',
        'keep_notranslate_tags': 'bool',
        'format_options': 'object',
        'encoding': 'str',
        'include_unverified_translations': 'bool',
        'use_last_reviewed_version': 'bool',
        'locale_ids': 'List[str]',
        'fallback_locale_id': 'str',
        'source_locale_id': 'str',
        'custom_metadata_filters': 'object'
    }

    attribute_map = {
        'file_format': 'file_format',
        'branch': 'branch',
        'tags': 'tags',
        'include_empty_translations': 'include_empty_translations',
        'exclude_empty_zero_forms': 'exclude_empty_zero_forms',
        'include_translated_keys': 'include_translated_keys',
        'keep_notranslate_tags': 'keep_notranslate_tags',
        'format_options': 'format_options',
        'encoding': 'encoding',
        'include_unverified_translations': 'include_unverified_translations',
        'use_last_reviewed_version': 'use_last_reviewed_version',
        'locale_ids': 'locale_ids',
        'fallback_locale_id': 'fallback_locale_id',
        'source_locale_id': 'source_locale_id',
        'custom_metadata_filters': 'custom_metadata_filters'
    }

    def __init__(self, file_format=None, branch=None, tags=None, include_empty_translations=None, exclude_empty_zero_forms=None, include_translated_keys=None, keep_notranslate_tags=None, format_options=None, encoding=None, include_unverified_translations=None, use_last_reviewed_version=None, locale_ids=None, fallback_locale_id=None, source_locale_id=None, custom_metadata_filters=None, local_vars_configuration=None):  # noqa: E501
        """LocaleDownloadCreateParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_format = None
        self._branch = None
        self._tags = None
        self._include_empty_translations = None
        self._exclude_empty_zero_forms = None
        self._include_translated_keys = None
        self._keep_notranslate_tags = None
        self._format_options = None
        self._encoding = None
        self._include_unverified_translations = None
        self._use_last_reviewed_version = None
        self._locale_ids = None
        self._fallback_locale_id = None
        self._source_locale_id = None
        self._custom_metadata_filters = None
        self.discriminator = None

        self.file_format = file_format
        if branch is not None:
            self.branch = branch
        if tags is not None:
            self.tags = tags
        if include_empty_translations is not None:
            self.include_empty_translations = include_empty_translations
        if exclude_empty_zero_forms is not None:
            self.exclude_empty_zero_forms = exclude_empty_zero_forms
        if include_translated_keys is not None:
            self.include_translated_keys = include_translated_keys
        if keep_notranslate_tags is not None:
            self.keep_notranslate_tags = keep_notranslate_tags
        if format_options is not None:
            self.format_options = format_options
        if encoding is not None:
            self.encoding = encoding
        if include_unverified_translations is not None:
            self.include_unverified_translations = include_unverified_translations
        if use_last_reviewed_version is not None:
            self.use_last_reviewed_version = use_last_reviewed_version
        if locale_ids is not None:
            self.locale_ids = locale_ids
        if fallback_locale_id is not None:
            self.fallback_locale_id = fallback_locale_id
        if source_locale_id is not None:
            self.source_locale_id = source_locale_id
        if custom_metadata_filters is not None:
            self.custom_metadata_filters = custom_metadata_filters

    @property
    def file_format(self):
        """Gets the file_format of this LocaleDownloadCreateParameters.  # noqa: E501

        File format name. See the <a href=\"https://support.phrase.com/hc/en-us/sections/6111343326364\">format guide</a> for all supported file formats.  # noqa: E501

        :return: The file_format of this LocaleDownloadCreateParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_format

    @file_format.setter
    def file_format(self, file_format):
        """Sets the file_format of this LocaleDownloadCreateParameters.

        File format name. See the <a href=\"https://support.phrase.com/hc/en-us/sections/6111343326364\">format guide</a> for all supported file formats.  # noqa: E501

        :param file_format: The file_format of this LocaleDownloadCreateParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_format is None:  # noqa: E501
            raise ValueError("Invalid value for `file_format`, must not be `None`")  # noqa: E501

        self._file_format = file_format

    @property
    def branch(self):
        """Gets the branch of this LocaleDownloadCreateParameters.  # noqa: E501

        specify the branch to use  # noqa: E501

        :return: The branch of this LocaleDownloadCreateParameters.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this LocaleDownloadCreateParameters.

        specify the branch to use  # noqa: E501

        :param branch: The branch of this LocaleDownloadCreateParameters.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def tags(self):
        """Gets the tags of this LocaleDownloadCreateParameters.  # noqa: E501

        Limit results to keys tagged with a list of comma separated tag names.  # noqa: E501

        :return: The tags of this LocaleDownloadCreateParameters.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this LocaleDownloadCreateParameters.

        Limit results to keys tagged with a list of comma separated tag names.  # noqa: E501

        :param tags: The tags of this LocaleDownloadCreateParameters.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def include_empty_translations(self):
        """Gets the include_empty_translations of this LocaleDownloadCreateParameters.  # noqa: E501

        Indicates whether keys without translations should be included in the output as well.  # noqa: E501

        :return: The include_empty_translations of this LocaleDownloadCreateParameters.  # noqa: E501
        :rtype: bool
        """
        return self._include_empty_translations

    @include_empty_translations.setter
    def include_empty_translations(self, include_empty_translations):
        """Sets the include_empty_translations of this LocaleDownloadCreateParameters.

        Indicates whether keys without translations should be included in the output as well.  # noqa: E501

        :param include_empty_translations: The include_empty_translations of this LocaleDownloadCreateParameters.  # noqa: E501
        :type: bool
        """

        self._include_empty_translations = include_empty_translations

    @property
    def exclude_empty_zero_forms(self):
        """Gets the exclude_empty_zero_forms of this LocaleDownloadCreateParameters.  # noqa: E501

        Indicates whether zero forms should be included when empty in pluralized keys.  # noqa: E501

        :return: The exclude_empty_zero_forms of this LocaleDownloadCreateParameters.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_empty_zero_forms

    @exclude_empty_zero_forms.setter
    def exclude_empty_zero_forms(self, exclude_empty_zero_forms):
        """Sets the exclude_empty_zero_forms of this LocaleDownloadCreateParameters.

        Indicates whether zero forms should be included when empty in pluralized keys.  # noqa: E501

        :param exclude_empty_zero_forms: The exclude_empty_zero_forms of this LocaleDownloadCreateParameters.  # noqa: E501
        :type: bool
        """

        self._exclude_empty_zero_forms = exclude_empty_zero_forms

    @property
    def include_translated_keys(self):
        """Gets the include_translated_keys of this LocaleDownloadCreateParameters.  # noqa: E501

        Include translated keys in the locale file. Use in combination with include_empty_translations to obtain only untranslated keys.  # noqa: E501

        :return: The include_translated_keys of this LocaleDownloadCreateParameters.  # noqa: E501
        :rtype: bool
        """
        return self._include_translated_keys

    @include_translated_keys.setter
    def include_translated_keys(self, include_translated_keys):
        """Sets the include_translated_keys of this LocaleDownloadCreateParameters.

        Include translated keys in the locale file. Use in combination with include_empty_translations to obtain only untranslated keys.  # noqa: E501

        :param include_translated_keys: The include_translated_keys of this LocaleDownloadCreateParameters.  # noqa: E501
        :type: bool
        """

        self._include_translated_keys = include_translated_keys

    @property
    def keep_notranslate_tags(self):
        """Gets the keep_notranslate_tags of this LocaleDownloadCreateParameters.  # noqa: E501

        Indicates whether [NOTRANSLATE] tags should be kept.  # noqa: E501

        :return: The keep_notranslate_tags of this LocaleDownloadCreateParameters.  # noqa: E501
        :rtype: bool
        """
        return self._keep_notranslate_tags

    @keep_notranslate_tags.setter
    def keep_notranslate_tags(self, keep_notranslate_tags):
        """Sets the keep_notranslate_tags of this LocaleDownloadCreateParameters.

        Indicates whether [NOTRANSLATE] tags should be kept.  # noqa: E501

        :param keep_notranslate_tags: The keep_notranslate_tags of this LocaleDownloadCreateParameters.  # noqa: E501
        :type: bool
        """

        self._keep_notranslate_tags = keep_notranslate_tags

    @property
    def format_options(self):
        """Gets the format_options of this LocaleDownloadCreateParameters.  # noqa: E501

        Additional formatting and render options. See the <a href=\"https://support.phrase.com/hc/en-us/sections/6111343326364\">format guide</a> for a list of options available for each format. Specify format options like this: <code>...&format_options[foo]=bar</code>  # noqa: E501

        :return: The format_options of this LocaleDownloadCreateParameters.  # noqa: E501
        :rtype: object
        """
        return self._format_options

    @format_options.setter
    def format_options(self, format_options):
        """Sets the format_options of this LocaleDownloadCreateParameters.

        Additional formatting and render options. See the <a href=\"https://support.phrase.com/hc/en-us/sections/6111343326364\">format guide</a> for a list of options available for each format. Specify format options like this: <code>...&format_options[foo]=bar</code>  # noqa: E501

        :param format_options: The format_options of this LocaleDownloadCreateParameters.  # noqa: E501
        :type: object
        """

        self._format_options = format_options

    @property
    def encoding(self):
        """Gets the encoding of this LocaleDownloadCreateParameters.  # noqa: E501

        Enforces a specific encoding on the file contents. Valid options are \"UTF-8\", \"UTF-16\" and \"ISO-8859-1\".  # noqa: E501

        :return: The encoding of this LocaleDownloadCreateParameters.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this LocaleDownloadCreateParameters.

        Enforces a specific encoding on the file contents. Valid options are \"UTF-8\", \"UTF-16\" and \"ISO-8859-1\".  # noqa: E501

        :param encoding: The encoding of this LocaleDownloadCreateParameters.  # noqa: E501
        :type: str
        """

        self._encoding = encoding

    @property
    def include_unverified_translations(self):
        """Gets the include_unverified_translations of this LocaleDownloadCreateParameters.  # noqa: E501

        if set to false unverified translations are excluded  # noqa: E501

        :return: The include_unverified_translations of this LocaleDownloadCreateParameters.  # noqa: E501
        :rtype: bool
        """
        return self._include_unverified_translations

    @include_unverified_translations.setter
    def include_unverified_translations(self, include_unverified_translations):
        """Sets the include_unverified_translations of this LocaleDownloadCreateParameters.

        if set to false unverified translations are excluded  # noqa: E501

        :param include_unverified_translations: The include_unverified_translations of this LocaleDownloadCreateParameters.  # noqa: E501
        :type: bool
        """

        self._include_unverified_translations = include_unverified_translations

    @property
    def use_last_reviewed_version(self):
        """Gets the use_last_reviewed_version of this LocaleDownloadCreateParameters.  # noqa: E501

        If set to true the last reviewed version of a translation is used. This is only available if the review workflow is enabled for the project.  # noqa: E501

        :return: The use_last_reviewed_version of this LocaleDownloadCreateParameters.  # noqa: E501
        :rtype: bool
        """
        return self._use_last_reviewed_version

    @use_last_reviewed_version.setter
    def use_last_reviewed_version(self, use_last_reviewed_version):
        """Sets the use_last_reviewed_version of this LocaleDownloadCreateParameters.

        If set to true the last reviewed version of a translation is used. This is only available if the review workflow is enabled for the project.  # noqa: E501

        :param use_last_reviewed_version: The use_last_reviewed_version of this LocaleDownloadCreateParameters.  # noqa: E501
        :type: bool
        """

        self._use_last_reviewed_version = use_last_reviewed_version

    @property
    def locale_ids(self):
        """Gets the locale_ids of this LocaleDownloadCreateParameters.  # noqa: E501

        Locale IDs or locale names  # noqa: E501

        :return: The locale_ids of this LocaleDownloadCreateParameters.  # noqa: E501
        :rtype: List[str]
        """
        return self._locale_ids

    @locale_ids.setter
    def locale_ids(self, locale_ids):
        """Sets the locale_ids of this LocaleDownloadCreateParameters.

        Locale IDs or locale names  # noqa: E501

        :param locale_ids: The locale_ids of this LocaleDownloadCreateParameters.  # noqa: E501
        :type: List[str]
        """

        self._locale_ids = locale_ids

    @property
    def fallback_locale_id(self):
        """Gets the fallback_locale_id of this LocaleDownloadCreateParameters.  # noqa: E501

        If a key has no translation in the locale being downloaded the translation in the fallback locale will be used. Provide the ID of the locale that should be used as the fallback. Requires include_empty_translations to be set to <code>true</code>.  # noqa: E501

        :return: The fallback_locale_id of this LocaleDownloadCreateParameters.  # noqa: E501
        :rtype: str
        """
        return self._fallback_locale_id

    @fallback_locale_id.setter
    def fallback_locale_id(self, fallback_locale_id):
        """Sets the fallback_locale_id of this LocaleDownloadCreateParameters.

        If a key has no translation in the locale being downloaded the translation in the fallback locale will be used. Provide the ID of the locale that should be used as the fallback. Requires include_empty_translations to be set to <code>true</code>.  # noqa: E501

        :param fallback_locale_id: The fallback_locale_id of this LocaleDownloadCreateParameters.  # noqa: E501
        :type: str
        """

        self._fallback_locale_id = fallback_locale_id

    @property
    def source_locale_id(self):
        """Gets the source_locale_id of this LocaleDownloadCreateParameters.  # noqa: E501

        Provides the source language of a corresponding job as the source language of the generated locale file. This parameter will be ignored unless used in combination with a <code>tag</code> parameter indicating a specific job.  # noqa: E501

        :return: The source_locale_id of this LocaleDownloadCreateParameters.  # noqa: E501
        :rtype: str
        """
        return self._source_locale_id

    @source_locale_id.setter
    def source_locale_id(self, source_locale_id):
        """Sets the source_locale_id of this LocaleDownloadCreateParameters.

        Provides the source language of a corresponding job as the source language of the generated locale file. This parameter will be ignored unless used in combination with a <code>tag</code> parameter indicating a specific job.  # noqa: E501

        :param source_locale_id: The source_locale_id of this LocaleDownloadCreateParameters.  # noqa: E501
        :type: str
        """

        self._source_locale_id = source_locale_id

    @property
    def custom_metadata_filters(self):
        """Gets the custom_metadata_filters of this LocaleDownloadCreateParameters.  # noqa: E501

        Custom metadata filters. Provide the name of the metadata field and the value to filter by. Only keys with matching metadata will be included in the download.   # noqa: E501

        :return: The custom_metadata_filters of this LocaleDownloadCreateParameters.  # noqa: E501
        :rtype: object
        """
        return self._custom_metadata_filters

    @custom_metadata_filters.setter
    def custom_metadata_filters(self, custom_metadata_filters):
        """Sets the custom_metadata_filters of this LocaleDownloadCreateParameters.

        Custom metadata filters. Provide the name of the metadata field and the value to filter by. Only keys with matching metadata will be included in the download.   # noqa: E501

        :param custom_metadata_filters: The custom_metadata_filters of this LocaleDownloadCreateParameters.  # noqa: E501
        :type: object
        """

        self._custom_metadata_filters = custom_metadata_filters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocaleDownloadCreateParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocaleDownloadCreateParameters):
            return True

        return self.to_dict() != other.to_dict()
