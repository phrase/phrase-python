# coding: utf-8

"""
    Phrase Strings API Reference

    The version of the OpenAPI document: 2.0.0
    Contact: support@phrase.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from phrase_api.configuration import Configuration


class Member(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'email': 'str',
        'username': 'str',
        'created_at': 'datetime',
        'last_activity_at': 'datetime',
        'role': 'str',
        'projects': 'list[ProjectLocales]',
        'permissions': 'object',
        'default_locale_codes': 'list[str]',
        'teams': 'list[TeamShort]',
        'spaces': 'list[MemberSpaces]'
    }

    attribute_map = {
        'id': 'id',
        'email': 'email',
        'username': 'username',
        'created_at': 'created_at',
        'last_activity_at': 'last_activity_at',
        'role': 'role',
        'projects': 'projects',
        'permissions': 'permissions',
        'default_locale_codes': 'default_locale_codes',
        'teams': 'teams',
        'spaces': 'spaces'
    }

    def __init__(self, id=None, email=None, username=None, created_at=None, last_activity_at=None, role=None, projects=None, permissions=None, default_locale_codes=None, teams=None, spaces=None, local_vars_configuration=None):  # noqa: E501
        """Member - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._email = None
        self._username = None
        self._created_at = None
        self._last_activity_at = None
        self._role = None
        self._projects = None
        self._permissions = None
        self._default_locale_codes = None
        self._teams = None
        self._spaces = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if email is not None:
            self.email = email
        if username is not None:
            self.username = username
        if created_at is not None:
            self.created_at = created_at
        if last_activity_at is not None:
            self.last_activity_at = last_activity_at
        if role is not None:
            self.role = role
        if projects is not None:
            self.projects = projects
        if permissions is not None:
            self.permissions = permissions
        if default_locale_codes is not None:
            self.default_locale_codes = default_locale_codes
        if teams is not None:
            self.teams = teams
        if spaces is not None:
            self.spaces = spaces

    @property
    def id(self):
        """Gets the id of this Member.  # noqa: E501


        :return: The id of this Member.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Member.


        :param id: The id of this Member.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this Member.  # noqa: E501


        :return: The email of this Member.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Member.


        :param email: The email of this Member.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def username(self):
        """Gets the username of this Member.  # noqa: E501


        :return: The username of this Member.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Member.


        :param username: The username of this Member.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def created_at(self):
        """Gets the created_at of this Member.  # noqa: E501


        :return: The created_at of this Member.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Member.


        :param created_at: The created_at of this Member.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def last_activity_at(self):
        """Gets the last_activity_at of this Member.  # noqa: E501


        :return: The last_activity_at of this Member.  # noqa: E501
        :rtype: datetime
        """
        return self._last_activity_at

    @last_activity_at.setter
    def last_activity_at(self, last_activity_at):
        """Sets the last_activity_at of this Member.


        :param last_activity_at: The last_activity_at of this Member.  # noqa: E501
        :type: datetime
        """

        self._last_activity_at = last_activity_at

    @property
    def role(self):
        """Gets the role of this Member.  # noqa: E501


        :return: The role of this Member.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Member.


        :param role: The role of this Member.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def projects(self):
        """Gets the projects of this Member.  # noqa: E501


        :return: The projects of this Member.  # noqa: E501
        :rtype: list[ProjectLocales]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this Member.


        :param projects: The projects of this Member.  # noqa: E501
        :type: list[ProjectLocales]
        """

        self._projects = projects

    @property
    def permissions(self):
        """Gets the permissions of this Member.  # noqa: E501


        :return: The permissions of this Member.  # noqa: E501
        :rtype: object
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Member.


        :param permissions: The permissions of this Member.  # noqa: E501
        :type: object
        """

        self._permissions = permissions

    @property
    def default_locale_codes(self):
        """Gets the default_locale_codes of this Member.  # noqa: E501


        :return: The default_locale_codes of this Member.  # noqa: E501
        :rtype: list[str]
        """
        return self._default_locale_codes

    @default_locale_codes.setter
    def default_locale_codes(self, default_locale_codes):
        """Sets the default_locale_codes of this Member.


        :param default_locale_codes: The default_locale_codes of this Member.  # noqa: E501
        :type: list[str]
        """

        self._default_locale_codes = default_locale_codes

    @property
    def teams(self):
        """Gets the teams of this Member.  # noqa: E501


        :return: The teams of this Member.  # noqa: E501
        :rtype: list[TeamShort]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this Member.


        :param teams: The teams of this Member.  # noqa: E501
        :type: list[TeamShort]
        """

        self._teams = teams

    @property
    def spaces(self):
        """Gets the spaces of this Member.  # noqa: E501


        :return: The spaces of this Member.  # noqa: E501
        :rtype: list[MemberSpaces]
        """
        return self._spaces

    @spaces.setter
    def spaces(self, spaces):
        """Sets the spaces of this Member.


        :param spaces: The spaces of this Member.  # noqa: E501
        :type: list[MemberSpaces]
        """

        self._spaces = spaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Member):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Member):
            return True

        return self.to_dict() != other.to_dict()
