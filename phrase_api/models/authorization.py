# coding: utf-8

"""
    Phrase Strings API Reference

    The version of the OpenAPI document: 2.0.0
    Contact: support@phrase.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from phrase_api.configuration import Configuration


class Authorization(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'note': 'str',
        'token_last_eight': 'str',
        'hashed_token': 'str',
        'scopes': 'list[str]',
        'expires_at': 'datetime',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'note': 'note',
        'token_last_eight': 'token_last_eight',
        'hashed_token': 'hashed_token',
        'scopes': 'scopes',
        'expires_at': 'expires_at',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, note=None, token_last_eight=None, hashed_token=None, scopes=None, expires_at=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """Authorization - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._note = None
        self._token_last_eight = None
        self._hashed_token = None
        self._scopes = None
        self._expires_at = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if note is not None:
            self.note = note
        if token_last_eight is not None:
            self.token_last_eight = token_last_eight
        if hashed_token is not None:
            self.hashed_token = hashed_token
        if scopes is not None:
            self.scopes = scopes
        if expires_at is not None:
            self.expires_at = expires_at
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Authorization.  # noqa: E501


        :return: The id of this Authorization.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Authorization.


        :param id: The id of this Authorization.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def note(self):
        """Gets the note of this Authorization.  # noqa: E501


        :return: The note of this Authorization.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Authorization.


        :param note: The note of this Authorization.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def token_last_eight(self):
        """Gets the token_last_eight of this Authorization.  # noqa: E501


        :return: The token_last_eight of this Authorization.  # noqa: E501
        :rtype: str
        """
        return self._token_last_eight

    @token_last_eight.setter
    def token_last_eight(self, token_last_eight):
        """Sets the token_last_eight of this Authorization.


        :param token_last_eight: The token_last_eight of this Authorization.  # noqa: E501
        :type: str
        """

        self._token_last_eight = token_last_eight

    @property
    def hashed_token(self):
        """Gets the hashed_token of this Authorization.  # noqa: E501


        :return: The hashed_token of this Authorization.  # noqa: E501
        :rtype: str
        """
        return self._hashed_token

    @hashed_token.setter
    def hashed_token(self, hashed_token):
        """Sets the hashed_token of this Authorization.


        :param hashed_token: The hashed_token of this Authorization.  # noqa: E501
        :type: str
        """

        self._hashed_token = hashed_token

    @property
    def scopes(self):
        """Gets the scopes of this Authorization.  # noqa: E501


        :return: The scopes of this Authorization.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this Authorization.


        :param scopes: The scopes of this Authorization.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    @property
    def expires_at(self):
        """Gets the expires_at of this Authorization.  # noqa: E501


        :return: The expires_at of this Authorization.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this Authorization.


        :param expires_at: The expires_at of this Authorization.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def created_at(self):
        """Gets the created_at of this Authorization.  # noqa: E501


        :return: The created_at of this Authorization.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Authorization.


        :param created_at: The created_at of this Authorization.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Authorization.  # noqa: E501


        :return: The updated_at of this Authorization.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Authorization.


        :param updated_at: The updated_at of this Authorization.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Authorization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Authorization):
            return True

        return self.to_dict() != other.to_dict()
