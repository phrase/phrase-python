# coding: utf-8

"""
    Phrase Strings API Reference

    The version of the OpenAPI document: 2.0.0
    Contact: support@phrase.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from phrase_api.configuration import Configuration


class RepoSyncEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'event_type': 'str',
        'created_at': 'datetime',
        'status': 'str',
        'pull_request_url': 'str',
        'auto_import': 'bool',
        'errors': 'List[RepoSyncEventErrorsInner]'
    }

    attribute_map = {
        'id': 'id',
        'event_type': 'event_type',
        'created_at': 'created_at',
        'status': 'status',
        'pull_request_url': 'pull_request_url',
        'auto_import': 'auto_import',
        'errors': 'errors'
    }

    def __init__(self, id=None, event_type=None, created_at=None, status=None, pull_request_url=None, auto_import=None, errors=None, local_vars_configuration=None):  # noqa: E501
        """RepoSyncEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._event_type = None
        self._created_at = None
        self._status = None
        self._pull_request_url = None
        self._auto_import = None
        self._errors = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if event_type is not None:
            self.event_type = event_type
        if created_at is not None:
            self.created_at = created_at
        if status is not None:
            self.status = status
        if pull_request_url is not None:
            self.pull_request_url = pull_request_url
        if auto_import is not None:
            self.auto_import = auto_import
        if errors is not None:
            self.errors = errors

    @property
    def id(self):
        """Gets the id of this RepoSyncEvent.  # noqa: E501


        :return: The id of this RepoSyncEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepoSyncEvent.


        :param id: The id of this RepoSyncEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def event_type(self):
        """Gets the event_type of this RepoSyncEvent.  # noqa: E501


        :return: The event_type of this RepoSyncEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this RepoSyncEvent.


        :param event_type: The event_type of this RepoSyncEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["import", "export"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and event_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def created_at(self):
        """Gets the created_at of this RepoSyncEvent.  # noqa: E501


        :return: The created_at of this RepoSyncEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RepoSyncEvent.


        :param created_at: The created_at of this RepoSyncEvent.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def status(self):
        """Gets the status of this RepoSyncEvent.  # noqa: E501


        :return: The status of this RepoSyncEvent.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RepoSyncEvent.


        :param status: The status of this RepoSyncEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["running", "success", "failure"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def pull_request_url(self):
        """Gets the pull_request_url of this RepoSyncEvent.  # noqa: E501

        URL of the pull request created on export  # noqa: E501

        :return: The pull_request_url of this RepoSyncEvent.  # noqa: E501
        :rtype: str
        """
        return self._pull_request_url

    @pull_request_url.setter
    def pull_request_url(self, pull_request_url):
        """Sets the pull_request_url of this RepoSyncEvent.

        URL of the pull request created on export  # noqa: E501

        :param pull_request_url: The pull_request_url of this RepoSyncEvent.  # noqa: E501
        :type: str
        """

        self._pull_request_url = pull_request_url

    @property
    def auto_import(self):
        """Gets the auto_import of this RepoSyncEvent.  # noqa: E501

        Whether the import was triggered by the repo push event  # noqa: E501

        :return: The auto_import of this RepoSyncEvent.  # noqa: E501
        :rtype: bool
        """
        return self._auto_import

    @auto_import.setter
    def auto_import(self, auto_import):
        """Sets the auto_import of this RepoSyncEvent.

        Whether the import was triggered by the repo push event  # noqa: E501

        :param auto_import: The auto_import of this RepoSyncEvent.  # noqa: E501
        :type: bool
        """

        self._auto_import = auto_import

    @property
    def errors(self):
        """Gets the errors of this RepoSyncEvent.  # noqa: E501

        List of error messages, in case of failure  # noqa: E501

        :return: The errors of this RepoSyncEvent.  # noqa: E501
        :rtype: List[RepoSyncEventErrorsInner]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this RepoSyncEvent.

        List of error messages, in case of failure  # noqa: E501

        :param errors: The errors of this RepoSyncEvent.  # noqa: E501
        :type: List[RepoSyncEventErrorsInner]
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepoSyncEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RepoSyncEvent):
            return True

        return self.to_dict() != other.to_dict()
