# coding: utf-8

"""
    Phrase Strings API Reference

    The version of the OpenAPI document: 2.0.0
    Contact: support@phrase.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from phrase_api.configuration import Configuration


class CustomMetadataPropertiesCreateParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'data_type': 'CustomMetadataDataType',
        'project_ids': 'List[str]',
        'description': 'str',
        'value_options': 'List[str]'
    }

    attribute_map = {
        'name': 'name',
        'data_type': 'data_type',
        'project_ids': 'project_ids',
        'description': 'description',
        'value_options': 'value_options'
    }

    def __init__(self, name=None, data_type=None, project_ids=None, description=None, value_options=None, local_vars_configuration=None):  # noqa: E501
        """CustomMetadataPropertiesCreateParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._data_type = None
        self._project_ids = None
        self._description = None
        self._value_options = None
        self.discriminator = None

        self.name = name
        self.data_type = data_type
        if project_ids is not None:
            self.project_ids = project_ids
        if description is not None:
            self.description = description
        if value_options is not None:
            self.value_options = value_options

    @property
    def name(self):
        """Gets the name of this CustomMetadataPropertiesCreateParameters.  # noqa: E501

        name of the property  # noqa: E501

        :return: The name of this CustomMetadataPropertiesCreateParameters.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomMetadataPropertiesCreateParameters.

        name of the property  # noqa: E501

        :param name: The name of this CustomMetadataPropertiesCreateParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def data_type(self):
        """Gets the data_type of this CustomMetadataPropertiesCreateParameters.  # noqa: E501


        :return: The data_type of this CustomMetadataPropertiesCreateParameters.  # noqa: E501
        :rtype: CustomMetadataDataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this CustomMetadataPropertiesCreateParameters.


        :param data_type: The data_type of this CustomMetadataPropertiesCreateParameters.  # noqa: E501
        :type: CustomMetadataDataType
        """
        if self.local_vars_configuration.client_side_validation and data_type is None:  # noqa: E501
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501

        self._data_type = data_type

    @property
    def project_ids(self):
        """Gets the project_ids of this CustomMetadataPropertiesCreateParameters.  # noqa: E501

        ids of projects that the property belongs to  # noqa: E501

        :return: The project_ids of this CustomMetadataPropertiesCreateParameters.  # noqa: E501
        :rtype: List[str]
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids):
        """Sets the project_ids of this CustomMetadataPropertiesCreateParameters.

        ids of projects that the property belongs to  # noqa: E501

        :param project_ids: The project_ids of this CustomMetadataPropertiesCreateParameters.  # noqa: E501
        :type: List[str]
        """

        self._project_ids = project_ids

    @property
    def description(self):
        """Gets the description of this CustomMetadataPropertiesCreateParameters.  # noqa: E501

        description of property  # noqa: E501

        :return: The description of this CustomMetadataPropertiesCreateParameters.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomMetadataPropertiesCreateParameters.

        description of property  # noqa: E501

        :param description: The description of this CustomMetadataPropertiesCreateParameters.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def value_options(self):
        """Gets the value_options of this CustomMetadataPropertiesCreateParameters.  # noqa: E501

        value options of property (only applies to single or multi select properties)  # noqa: E501

        :return: The value_options of this CustomMetadataPropertiesCreateParameters.  # noqa: E501
        :rtype: List[str]
        """
        return self._value_options

    @value_options.setter
    def value_options(self, value_options):
        """Sets the value_options of this CustomMetadataPropertiesCreateParameters.

        value options of property (only applies to single or multi select properties)  # noqa: E501

        :param value_options: The value_options of this CustomMetadataPropertiesCreateParameters.  # noqa: E501
        :type: List[str]
        """

        self._value_options = value_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomMetadataPropertiesCreateParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomMetadataPropertiesCreateParameters):
            return True

        return self.to_dict() != other.to_dict()
